<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>henRyXzx</title>
  
  <subtitle>Knowledge is a treasure, but practice is the key to it.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.henryxzx.com/"/>
  <updated>2018-10-22T14:37:22.472Z</updated>
  <id>http://blog.henryxzx.com/</id>
  
  <author>
    <name>XZX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP协议中的GET和POST方法</title>
    <link href="http://blog.henryxzx.com/2018/10/22/get-post/"/>
    <id>http://blog.henryxzx.com/2018/10/22/get-post/</id>
    <published>2018-10-22T13:16:37.000Z</published>
    <updated>2018-10-22T14:37:22.472Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p><strong>两种最常用的 HTTP 方法是：GET 和 POST。</strong></p></blockquote><hr><a id="more"></a><h3 id="什么是HTTP"><a href="#什么是HTTP" class="headerlink" title="什么是HTTP"></a>什么是HTTP</h3><ul><li>超文本传输协议（HTTP）的设计目的是保证客户机和服务器之间的通信。</li><li>HTTP的工作方式是客户机与服务器之间的请求-应答协议</li><li>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。</li></ul><hr><h3 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h3><p>在get方法中，查询字符串（名称/值对）是在GET请求的URL中发送的，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/baidu?isource=infinity&amp;iname=baidu&amp;itype=web&amp;tn=98012088_9_dg&amp;ch=7&amp;ie=utf-8&amp;wd=xxxxx</span><br></pre></td></tr></table></figure><p>有关 GET 请求的其他一些注释：</p><ul><li><p>GET 请求可被缓存</p></li><li><p>GET 请求保留在浏览器历史记录中</p></li><li><p>GET 请求可被收藏为书签</p></li><li><p>GET 请求不应在处理敏感数据时使用</p></li><li><p>GET 请求只应当用于取回数据</p></li></ul><hr><h3 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h3><p>在post方法中，查询字符串（名称/值对）是在POST请求的HTTP消息主体中发送的</p><p>有关 POST 请求的其他一些注释：</p><ul><li><p>POST 请求不会被缓存</p></li><li><p>POST 请求不会保留在浏览器历史记录中</p></li><li><p>POST 不能被收藏为书签</p></li></ul><hr><h3 id="比较-GET-与-POST"><a href="#比较-GET-与-POST" class="headerlink" title="比较 GET 与 POST"></a>比较 GET 与 POST</h3><p>下面的表格列出了比较了两种 HTTP 方法的一般理解：GET 和 POST。</p><table><thead><tr><th></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>后退按钮/刷新</td><td>无害</td><td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td>书签</td><td>可收藏为书签</td><td>不可收藏为书签</td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能缓存</td></tr><tr><td>编码类型</td><td>application/x-www-form-urlencoded</td><td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td>历史</td><td>参数保留在浏览器历史中。</td><td>参数不会保存在浏览器历史中。</td></tr><tr><td>对数据长度的限制</td><td>是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td>无限制。</td></tr><tr><td>对数据类型的限制</td><td>只允许 ASCII 字符。</td><td>没有限制。也允许二进制数据。</td></tr><tr><td>安全性</td><td>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td>可见性</td><td>数据在 URL 中对所有人都是可见的。</td><td>数据不会显示在 URL 中。</td></tr></tbody></table><blockquote><p>上图中，http协议对于URL长度其实是没有限制的，只是<strong>Web服务器</strong>和<strong>浏览器</strong>对URI都有自己的长度限制</p><blockquote><p><strong>服务器的限制</strong>：接触的最多的服务器类型就是Nginx和Tomcat，对于url的长度限制是通过控制http请求头的长度来进行限制的，nginx的配置参数为large_client_header_buffers，tomcat的请求配置参数为 maxHttpHeaderSize。</p></blockquote><blockquote><p><strong>浏览器的限制</strong>：每种浏览器也会对url的长度有所限制。</p></blockquote></blockquote><hr><h3 id="其他-HTTP-请求方法"><a href="#其他-HTTP-请求方法" class="headerlink" title="其他 HTTP 请求方法"></a>其他 HTTP 请求方法</h3><p>下面的表格列出了其他一些 HTTP 请求方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>HEAD</td><td>与 GET 相同，但只返回 HTTP 报头，不返回文档主体。</td></tr><tr><td>PUT</td><td>上传指定的 URI 表示。</td></tr><tr><td>DELETE</td><td>删除指定资源。</td></tr><tr><td>OPTIONS</td><td>返回服务器支持的 HTTP 方法。</td></tr><tr><td>CONNECT</td><td>把请求连接转换到透明的 TCP/IP 通道。</td></tr></tbody></table><hr><h3 id="深入了解GET和POST方法"><a href="#深入了解GET和POST方法" class="headerlink" title="深入了解GET和POST方法"></a>深入了解GET和POST方法</h3><p>首先先来了解RFC：</p><blockquote><p>征求意见稿（英语：Request For Comments，缩写为RFC），是由互联网工程任务组（IETF）发布的一系列备忘录。文件收集了有关互联网相关信息，以及UNIX和互联网社区的软件文件，以编号排定。目前RFC文件是由互联网协会（ISOC）赞助发行。</p></blockquote><p>然后在来了解一下「语法」和「语义」semantic 的关系</p><blockquote><p>一种语言是合法句子的集合。什么样的句子是合法的呢？可以从两方面来判断：语法和语义。语法是和文法结构有关，然而语义是和按照这个结构所组合的单词符号的意义有关。合理的语法结构并不表明语义是合法的。例如我们常说：我上大学，这个句子是符合语法规则的，也符合语义规则。但是大学上我，虽然符合语法规则，但没有什么意义，所以说是不符合语义的。</p></blockquote><p>语义则定义了这一类型的请求具有什么样的性质。比如GET的语义就是「获取资源」，POST的语义是「处理资源」，那么在具体实现这两个方法时，就必须考虑其语义，做出符合其语义的行为。</p><p>当然在符合语法的前提下实现违背语义的行为也是可以做到的，比如使用GET方法修改用户信息，POST获取资源列表，这样就只能说这个请求是「合法」的，但不是「符合语义」的。 写到这里突然联想到XML里面的两个概念：Well Formed和Valid，似乎也正是语法和语义的理念呢。</p><p>上文说到方法是请求语义的主要来源，也即是还有次要来源，一些请求Header可以进一步修饰请求的语义，比如一个带上了 <code>Range</code> Header的GET请求就变成了部分请求。</p><p>RFC7231里紧接着定义了HTTP方法的几个特性：</p><ol><li>Safe - 安全<br>这里的「安全」和通常理解的「安全」意义不同，如果一个方法的语义在本质上是「只读」的，那么这个方法就是安全的。客户端向服务端的资源发起的请求如果使用了是安全的方法，就不应该引起服务端任何的状态变化，因此也是无害的。 此RFC定义，GET, HEAD, OPTIONS 和 TRACE 这几个方法是安全的。<br>但是这个定义只是规范，并不能保证方法的实现也是安全的，服务端的实现可能会不符合方法语义，正如上文说过的使用GET修改用户信息的情况。<br>引入安全这个概念的目的是为了方便网络爬虫和缓存，以免调用或者缓存某些不安全方法时引起某些意外的后果。User Agent（浏览器）应该在执行安全和不安全方法时做出区分对待，并给用户以提示。</li><li>Idempotent - 幂等<br>幂等的概念是指同一个请求方法执行多次和仅执行一次的效果完全相同。按照RFC规范，PUT，DELETE和安全方法都是幂等的。同样，这也仅仅是规范，服务端实现是否幂等是无法确保的。<br>引入幂等主要是为了处理同一个请求重复发送的情况，比如在请求响应前失去连接，如果方法是幂等的，就可以放心地重发一次请求。这也是浏览器在后退/刷新时遇到POST会给用户提示的原因：POST语义不是幂等的，重复请求可能会带来意想不到的后果。</li><li>Cacheable - 可缓存性 顾名思义就是一个方法是否可以被缓存，此RFC里GET，HEAD和某些情况下的POST都是可缓存的，但是绝大多数的浏览器的实现里仅仅支持GET和HEAD。关于缓存的更多内容可以去看RFC7234。</li></ol><p>在这三个特性里一直在强调同一个事情，那就是协议不等于实现：协议规定安全在实现里不一定安全，协议规定幂等在实现里不一定幂等，协议规定可缓存在实现里不一定可缓存。</p><p>GET的语义是请求获取指定的资源。GET方法是安全、幂等、可缓存的（除非有 <code>Cache-Control</code> Header的约束）,GET方法的报文主体没有任何语义。</p><p>POST的语义是根据请求负荷（报文主体）对指定的资源做出处理，具体的处理方式视资源类型而不同。POST不安全，不幂等，（大部分实现）不可缓存。</p><p> 参考文章：</p><p><a href="https://sunshinevvv.coding.me/blog/2017/02/09/HttpGETv.s.POST/" target="_blank" rel="noopener">HTTP协议中GET和POST方法的区别</a></p><p><a href="http://www.w3school.com.cn/tags/html_ref_httpmethods.asp" target="_blank" rel="noopener">HTTP 方法：GET 对比 POST</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;两种最常用的 HTTP 方法是：GET 和 POST。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://blog.henryxzx.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HTTP" scheme="http://blog.henryxzx.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>用scrapy爬取伯乐在线的文章</title>
    <link href="http://blog.henryxzx.com/2018/10/20/%E7%94%A8scrapy%E7%88%AC%E5%8F%96%E4%BC%AF%E4%B9%90%E5%9C%A8%E7%BA%BF%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>http://blog.henryxzx.com/2018/10/20/用scrapy爬取伯乐在线的文章/</id>
    <published>2018-10-19T16:38:47.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单记录一下自己在linux环境下使用scrapy爬取伯乐在线并提取结构性数据到数据库中的过程</p></blockquote><hr><h3 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h3><p>​    deepin15.7 + python 3.6 + mysql 5.5 + pycharm</p><hr><a id="more"></a><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><ul><li>安装python环境</li><li>安装pip</li><li>安装mysql</li><li><p>安装scrapy，virtualenv</p><ul><li>pip源推荐使用清华大学镜像源 <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul></li></ul><hr><h3 id="创建scrapy项目"><a href="#创建scrapy项目" class="headerlink" title="创建scrapy项目"></a>创建scrapy项目</h3><p>在pycharm中创建一个虚拟环境，安装好环境后，在目录下面创建scrapy项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject ArticleSpider</span><br></pre></td></tr></table></figure><p>项目的结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── ArticleSpider</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── spiders</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── jobbole.py</span><br><span class="line">│   │   └── __pycache__</span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></table></figure><hr><h3 id="分析网站中文章页面结构"><a href="#分析网站中文章页面结构" class="headerlink" title="分析网站中文章页面结构"></a>分析网站中文章页面结构</h3><p>先进入伯乐在线网站<code>http://www.jobbole.com/</code>，然后随便点开一篇文章</p><p>例如<code>http://blog.jobbole.com/114297/</code></p><p><img src="https://i.loli.net/2018/10/19/5bc9df9ba3f5f.png" alt="2.png"><br><img src="https://i.loli.net/2018/10/19/5bc9e058e13a9.png" alt="11.png"></p><p>对于某一篇文章，目前只需要获得文章的评论数，收藏数，点赞数（默认为1），分类，标题，正文，文章封面图和文章链接。</p><p>在Chrome中按F12查看个元素的标签，例如文章的收藏数</p><p><img src="https://i.loli.net/2018/10/19/5bc9e1c561821.png" alt="3.png"></p><h4 id="在scrapy-shell中获取网页数据"><a href="#在scrapy-shell中获取网页数据" class="headerlink" title="在scrapy shell中获取网页数据"></a>在scrapy shell中获取网页数据</h4><p>scrapy提供了一个shell环境方便我们调试，并查看获取的元素是否正确</p><p>在venv目录的bin目录下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate</span><br></pre></td></tr></table></figure><p>进入venv环境后输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http://blog.jobbole.com/<span class="number">114297</span>/</span><br></pre></td></tr></table></figure><p>进入到shell后用css选择器或xpath选择器选取刚才要获得的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; response.css(<span class="string">'.bookmark-btn::text'</span>).extract()</span></span><br><span class="line">[' 18 收藏']</span><br></pre></td></tr></table></figure><p>获得的是一个列表，因为class为bookmark-btn的元素只有一个，所以将上面的extract()改为extract_first(‘’)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; response.css(<span class="string">'.bookmark-btn::text'</span>).extract_first()</span></span><br><span class="line">' 18 收藏'</span><br></pre></td></tr></table></figure><p>得到一个字符串，这时将其中的18用正则表达式提取出来后就可以获取到收藏数了，其他的也是如此</p><hr><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="从pycharm中启动项目"><a href="#从pycharm中启动项目" class="headerlink" title="从pycharm中启动项目"></a>从pycharm中启动项目</h4><p>先在项目根目录创建一个main.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">execute([<span class="string">'scrapy'</span>, <span class="string">'crawl'</span>, <span class="string">'jobbole'</span>])</span><br></pre></td></tr></table></figure><p>在main文件中只有两行执行的代码，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(os.path.dirname(os.path.abspath(__file__)))</span><br></pre></td></tr></table></figure><p>是将当前的main文件所在目录，即根目录将入环境中，就可以调用别的py文件的方法和类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute([<span class="string">'scrapy'</span>, <span class="string">'crawl'</span>, <span class="string">'jobbole'</span>])</span><br></pre></td></tr></table></figure><p>在第一行导入了scrapy.cmdline即scrapy命令行工具的execute方法，因为Scrapy是通过 <code>scrapy</code> 命令行工具进行控制的。 这里我们称之为 “Scrapy tool” 以用来和子命令进行区分。 对于子命令，我们称为 “command” 或者 “Scrapy commands”。上面代码即相当于执行了<code>scrapy crawl jobbole</code></p><h4 id="获取url"><a href="#获取url" class="headerlink" title="获取url"></a>获取url</h4><p>在jobbole.py中，其中的parse函数用来获取当前页中的所有文章url和下一页的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobboleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">name = <span class="string">'jobbole'</span></span><br><span class="line">    allowed_domains = [<span class="string">'blog.jobbole.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://blog.jobbole.com/all-posts/'</span>]</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    提取当前页所有文章的url 一页20个 并获取下一页的url</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        res_nodes = response.css(<span class="string">'.post.floated-thumb .post-thumb a'</span>)</span><br><span class="line">        <span class="keyword">for</span> post_node <span class="keyword">in</span> res_nodes:</span><br><span class="line">            image_url = post_node.css(<span class="string">'img::attr(src)'</span>).extract_first(<span class="string">''</span>)</span><br><span class="line">            post_url = post_node.css(<span class="string">'::attr(href)'</span>).extract_first(<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">yield</span> Request(url=parse.urljoin(response.url, post_url), meta=&#123;<span class="string">'front_image_url'</span>:image_url&#125;, callback=self.parse_detail)</span><br><span class="line"></span><br><span class="line">        next_url = response.css(<span class="string">'.next.page-numbers::attr(href)'</span>).extract_first(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> next_url:</span><br><span class="line">            <span class="keyword">yield</span> Request(url=parse.urljoin(response.url, next_url), callback=self.parse)</span><br></pre></td></tr></table></figure><h4 id="通过itemloader装载items"><a href="#通过itemloader装载items" class="headerlink" title="通过itemloader装载items"></a>通过itemloader装载items</h4><p>在scrapy中提供<code>Item</code>类，<code>Item</code>对象是种简单的容器，保存了爬取到得数据。 其提供了类似于词典(dictionary-like)的API以及用于声明可用字段的简单语法。</p><p>如果直接用Item类，如果后期要对代码进行维护就会变得很繁琐，使用<code>ItemLoader</code>类就可以自己编写函数来处理item中的数据，在jobbole.py中加入Item</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">res_image_url = response.meta.get(<span class="string">'front_image_url'</span>, <span class="string">''</span>)</span><br><span class="line">item_loader = ArticleItemLoader(item=JobBoleArticleItem(), response=response)</span><br><span class="line">item_loader.add_css(<span class="string">'title'</span>, <span class="string">'.entry-header h1::text'</span>)</span><br><span class="line">item_loader.add_value(<span class="string">'url'</span>, response.url)</span><br><span class="line">item_loader.add_value(<span class="string">'url_md5'</span>, get_md5(response.url))</span><br><span class="line">item_loader.add_css(<span class="string">'create_date'</span>, <span class="string">'p.entry-meta-hide-on-mobile::text'</span>)</span><br><span class="line">item_loader.add_value(<span class="string">'front_image_url'</span>, [res_image_url])</span><br><span class="line">item_loader.add_css(<span class="string">'comments_nums'</span>, <span class="string">'a[href="#article-comment"] span::text'</span>)</span><br><span class="line">item_loader.add_css(<span class="string">'tags'</span>, <span class="string">'.entry-meta-hide-on-mobile a::text'</span>)</span><br><span class="line">item_loader.add_css(<span class="string">'content'</span>, <span class="string">'div.entry'</span>)</span><br><span class="line">item_loader.add_css(<span class="string">'collection_nums'</span>, <span class="string">'.bookmark-btn::text'</span>)</span><br><span class="line">item_loader.add_css(<span class="string">'praise_nums'</span>, <span class="string">'.vote-post-up h10::text'</span>)</span><br></pre></td></tr></table></figure><h5 id="Input-and-Output-processors"><a href="#Input-and-Output-processors" class="headerlink" title="Input and Output processors"></a>Input and Output processors</h5><p>Item Loader在每个(Item)字段中都包含了一个输入处理器和一个输出处理器｡ 输入处理器收到数据时立刻提取数据 (通过 <a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/loaders.html#scrapy.loader.ItemLoader.add_xpath" target="_blank" rel="noopener"><code>add_xpath()</code></a>, <a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/loaders.html#scrapy.loader.ItemLoader.add_css" target="_blank" rel="noopener"><code>add_css()</code></a> 或者 <a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/loaders.html#scrapy.loader.ItemLoader.add_value" target="_blank" rel="noopener"><code>add_value()</code></a> 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内. 收集到所有的数据后, 调用 <a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/loaders.html#scrapy.loader.ItemLoader.load_item" target="_blank" rel="noopener"><code>ItemLoader.load_item()</code></a> 方法来填充,并得到填充后的 <a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/items.html#scrapy.item.Item" target="_blank" rel="noopener"><code>Item</code></a> 对象. 这是当输出处理器被和之前收集到的数据(和用输入处理器处理的)被调用.输出处理器的结果是被分配到Item的最终值｡</p><p>之后在Item.py中加入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobBoleArticleItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">title = scrapy.Field()</span><br><span class="line">    create_date = scrapy.Field(</span><br><span class="line">        input_processor=MapCompose(date_convert)</span><br><span class="line">    )</span><br><span class="line">    url = scrapy.Field()</span><br><span class="line">    url_md5 = scrapy.Field()</span><br><span class="line">    front_image_url = scrapy.Field(</span><br><span class="line">        output_processor=MapCompose(return_value)</span><br><span class="line">    )</span><br><span class="line">    front_image_path = scrapy.Field()</span><br><span class="line">    praise_nums = scrapy.Field(</span><br><span class="line">        input_processor=MapCompose(get_nums)</span><br><span class="line">    )</span><br><span class="line">    comments_nums = scrapy.Field(</span><br><span class="line">        input_processor=MapCompose(get_nums)</span><br><span class="line">    )</span><br><span class="line">    tags = scrapy.Field(</span><br><span class="line">        output_processor=Join(<span class="string">','</span>)</span><br><span class="line">    )</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    collection_nums = scrapy.Field(</span><br><span class="line">        input_processor=MapCompose(get_nums)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>然后在settings.py中，将robots.txt规则设置为<code>False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>这时爬虫项目大致完成，接下来配置数据库和pipelines</p><hr><h4 id="写入数据库"><a href="#写入数据库" class="headerlink" title="写入数据库"></a>写入数据库</h4><p>首先需要安装python的mysql-dev，在这里记录一下我遇到的坑，在linux下直接<code>pip install mysql-python</code>会出现错误，这时需要在外面打开命令行，执行<code>sudo apt-get install libmysqlclient-dev</code>后就可以安装了。</p><blockquote><p>写入数据库有同步和异步的方法，这里只记录异步方法，因为同步方法出错让我卡了两个小时，爷吐了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlTwistedPipline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dbpool)</span>:</span></span><br><span class="line">        self.dbpool = dbpool</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span><span class="params">(cls, settings)</span>:</span></span><br><span class="line">        dbparms = dict(</span><br><span class="line">            host = settings[<span class="string">"MYSQL_HOST"</span>],</span><br><span class="line">            db = settings[<span class="string">"MYSQL_DBNAME"</span>],</span><br><span class="line">            user = settings[<span class="string">"MYSQL_USER"</span>],</span><br><span class="line">            passwd = settings[<span class="string">"MYSQL_PASSWORD"</span>],</span><br><span class="line">            charset=<span class="string">'utf8'</span>,</span><br><span class="line">            cursorclass=MySQLdb.cursors.DictCursor,</span><br><span class="line">            use_unicode=<span class="keyword">True</span>,</span><br><span class="line">        )</span><br><span class="line">        dbpool = adbapi.ConnectionPool(<span class="string">"MySQLdb"</span>, **dbparms)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls(dbpool)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># 使用twisted将mysql插入变成异步执行</span></span><br><span class="line">        query = self.dbpool.runInteraction(self.do_insert, item)</span><br><span class="line">        query.addErrback(self.handle_error, item, spider) <span class="comment"># 处理异常</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_error</span><span class="params">(self, failure, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># 处理异步插入的异常</span></span><br><span class="line">        print(failure)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_insert</span><span class="params">(self, cursor, item)</span>:</span></span><br><span class="line">        <span class="comment"># 执行具体的插入</span></span><br><span class="line">        <span class="comment"># 根据不同的item 构建不同的sql语句并插入到mysql中</span></span><br><span class="line">        insert_sql, params = item.get_insert_sql()</span><br><span class="line">        print(insert_sql, params)</span><br><span class="line">        cursor.execute(insert_sql, params)</span><br></pre></td></tr></table></figure><p>在pipelines.py中如上配置，然后在settings.py的最后面加上数据库帐号密码之类的信息，再在items.py中编写get_insert_sql函数就可以将数据写入到数据库中了，而且不同的爬虫项目还可以复用这个结构，只需要改写get_insert_sql中的sql语句就可以了。</p><hr><h4 id="将图片和爬取的数据导出为Json文件"><a href="#将图片和爬取的数据导出为Json文件" class="headerlink" title="将图片和爬取的数据导出为Json文件"></a>将图片和爬取的数据导出为Json文件</h4><p>懒得写了，放在github上。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单记录一下自己在linux环境下使用scrapy爬取伯乐在线并提取结构性数据到数据库中的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;项目环境&quot;&gt;&lt;a href=&quot;#项目环境&quot; class=&quot;headerlink&quot; title=&quot;项目环境&quot;&gt;&lt;/a&gt;项目环境&lt;/h3&gt;&lt;p&gt;​    deepin15.7 + python 3.6 + mysql 5.5 + pycharm&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.henryxzx.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.henryxzx.com/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://blog.henryxzx.com/tags/Scrapy/"/>
    
      <category term="Spider" scheme="http://blog.henryxzx.com/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>Mysql ON DUPLICATE KEY 用法</title>
    <link href="http://blog.henryxzx.com/2018/10/20/ON%20DUPLICATE%20KEY%20%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.henryxzx.com/2018/10/20/ON DUPLICATE KEY 用法/</id>
    <published>2018-10-19T16:36:28.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<p>为保证数据表中的内容不会重复，通常会设定一个或多个列为Primary key</p><a id="more"></a><p>首先，我想向表中插入一条数据(假设name为PK)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO player(name, sex, weight)VALUES(&apos;jack&apos;, &apos;male&apos;, 50)</span><br></pre></td></tr></table></figure><p>在插入这段数据之前，我们会先检查PK值是否已经存在以免发生错误，所以需要多写一段select语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM player WHERE name = &apos;jack&apos;</span><br></pre></td></tr></table></figure><p>如果现在的功能需求是“<strong>新增一条数据，如果已经存在就更新</strong>”</p><p>就可以使用MySQL中的语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT ... ON DUPLICATE KEY UPDATE</span><br></pre></td></tr></table></figure><p>根据刚才的需求，改写sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT into player(name, sex, weight)VALUES(&apos;jack&apos;, &apos;male&apos;, 50) ON DUPLICATE KEY UPDATE name = &apos;jack&apos;, sex = &apos;male&apos;, weight = &apos;50&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为保证数据表中的内容不会重复，通常会设定一个或多个列为Primary key&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://blog.henryxzx.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://blog.henryxzx.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Visual Works Character Prototype</title>
    <link href="http://blog.henryxzx.com/2018/09/20/VISUAL-WORKS/"/>
    <id>http://blog.henryxzx.com/2018/09/20/VISUAL-WORKS/</id>
    <published>2018-09-20T11:54:28.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Fascinate the world with your ideas.</p><p>Let this character guide you.</p></blockquote><a id="more"></a><p>Youtube：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/ahcgkIruXwc" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>Bilibili：</p><iframe src="//player.bilibili.com/player.html?aid=32089813&cid=56135765&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Fascinate the world with your ideas.&lt;/p&gt;
&lt;p&gt;Let this character guide you.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="游戏CG" scheme="http://blog.henryxzx.com/tags/%E6%B8%B8%E6%88%8FCG/"/>
    
  </entry>
  
  <entry>
    <title>通过UDP53实现校园网免认证上网</title>
    <link href="http://blog.henryxzx.com/2018/09/17/%E9%80%9A%E8%BF%87UDP53%20%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%85%8D%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/"/>
    <id>http://blog.henryxzx.com/2018/09/17/通过UDP53 实现校园网免认证上网/</id>
    <published>2018-09-17T12:02:47.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h3><p>阿里云的学生服务器买了有一段时间了，本来想拿来部署一个网站的，但是因为国内坑爹的备案制度，导致我又买了一个国外的服务器来部署（国外的学生服务器比国内便宜多了），所以目前阿里云这个服务器就空闲了下来，为了不浪费这个服务器资源，于是就去知乎找了一些有关于学生服务器的用处，就发现有人提了这个用处，而且我们学校 12 点断网后连手机信号也会断，只能通过这种方法来上网，顿时觉得我们学校太 tm 坑了，但这个方法并不适用于所有校园网认证，如需<strong>锐捷认证</strong>的<strong>有线连接</strong>，正巧我们学校的还有无线 web 认证，<s> 可能是学校自己弄的 </s>，总之这个认证系统就很水，这个方法用了一段时间了并没有出任何问题，至于以后就不知道了，<s> 也许网管某天会发现 53 端口走了一堆 malformed packet 然后警告我一波。</s><br><a id="more"></a></p><h3 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h3><p>你需要：</p><ul><li><p>一台服务器</p><blockquote><p>阿里云，腾讯云的学生机都可以，甚至 DigitalOcean，Vultr 的国外节点也可以，但由于国外的 vps 使用这个方法时会受到 GFW 的干扰，所以很不稳定，不推荐使用国外节点，但是国外服务器不限带宽还是很爽的。</p></blockquote></li><li><p>一台能连接网络的设备</p><blockquote><p>经过试验，pc 端 windows，macbook，linux 都可以，移动端 ios，Android 也没问题，但是管理工具移动端没有。</p></blockquote></li></ul><h4 id="测试网关"><a href="#测试网关" class="headerlink" title="测试网关"></a>测试网关</h4><p>一般来说如果是使用的无线网络，无线网关会放行 UDP67/68，也就是 DHCP 端口来获取 ip，和 UDP53（DNS 端口）来获取 DNS，使用如下工具来测试 53 端口是否通行：</p><p><a href="https://github.com/BennyThink/UDP53-Filter-Type" target="_blank" rel="noopener">项目地址 </a></p><p>下载下来之后解压并运行 dist 内的 UDP53.exe。</p><p>如果出现的是 congratulations，那就代表 53 端口完全放行，可以使用下面的方法，如果不是的话，就只能通过 DNS 通道来搭建环境，下面不做介绍。</p><h4 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h4><blockquote><p>下面都以阿里云服务器为例子</p></blockquote><p>如果你没有服务器，先在阿里云服务器上购买一个学生机，这是我的<a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=hcbpp5n6" target="_blank" rel="noopener">推广链接 </a>，注册一个阿里云账号登陆并找到云翼计划，购买一个学生机，系统选择 centOS7，设置登陆密码，然后使用类似 putty 或 secureCRT 的 ssh 工具，远程连接到服务器上。</p><h4 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h4><ul><li><h5 id="安装-softether-VPN-server"><a href="#安装-softether-VPN-server" class="headerlink" title="安装 softether VPN server"></a>安装 softether VPN server</h5></li></ul><p>使用 ssh 工具连接到 vps 上，先更新 yum 源。</p><p><img src="https://i.loli.net/2018/09/17/5b9fbc122385f.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p>输入 y 确认，然后安装依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc zlib-devel openssl-devel readline-devel ncurses-devel</span><br></pre></td></tr></table></figure><blockquote><p>如果是 ubuntu 的话，使用的是 apt-get 来作为包管理器。</p></blockquote><p>在当前目录 /root 下载 softether VPN server 端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://oks2t4o68.bkt.clouddn.com/softether-vpnserver-v4.22-9634-beta-2016.11.27-linux-x64-64bit.tar.gz</span><br></pre></td></tr></table></figure><p>解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf softether-vpnserver-v4.22-9634-beta-2016.11.27-linux-x64-64bit.tar.gz</span><br></pre></td></tr></table></figure><p>进入目录并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vpnserver</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>选项全部选 1</p><p>安装完后再当前目录继续输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vpnserver start</span><br></pre></td></tr></table></figure><p>开启服务</p><ul><li><h5 id="设置-softether-VPN-server-服务端"><a href="#设置-softether-VPN-server-服务端" class="headerlink" title="设置 softether VPN server 服务端"></a>设置 softether VPN server 服务端</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vpncmd</span><br></pre></td></tr></table></figure><p>依次输入 1，回车，回车，再输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerPasswordSet</span><br></pre></td></tr></table></figure><p>设置服务端密码，到此服务器端已经部署完毕</p><h4 id="管理-softether-VPN-server"><a href="#管理-softether-VPN-server" class="headerlink" title="管理 softether VPN server"></a>管理 softether VPN server</h4><p>下面回到 pc 端，以 win10 为例，先从官网下载最新版 <a href="https://www.softether-download.com/cn.aspx?product=softether（需翻墙），然后安装管理工具，打开" target="_blank" rel="noopener">https://www.softether-download.com/cn.aspx?product=softether（需翻墙），然后安装管理工具，打开</a> slmgr.exe</p><p><img src="https://i.loli.net/2018/09/17/5b9fbb93ed112.png" alt=""></p><p>点击新设置</p><p><img src="https://i.loli.net/2018/09/17/5b9fbd1161937.jpg" alt=""></p><p>主机名填写你的<strong>vps 服务器 ip</strong>，输入你刚才设置的密码</p><p>将弹出的设置关掉，进入主界面</p><p><img src="https://i.loli.net/2018/09/17/5b9fbe50be650.jpg" alt=""></p><p>点击管理虚拟 HUB</p><p><img src="https://i.loli.net/2018/09/17/5b9fbe76ef3e0.png" alt=""></p><p>再点击管理用户</p><p><img src="https://i.loli.net/2018/09/17/5b9fbed0793d1.png" alt=""></p><p>点击新建</p><p><img src="https://i.loli.net/2018/09/17/5b9fbefc6f997.png" alt=""></p><p>如图设置，用户名和密码自己填</p><p>回到管理虚拟 HUB 界面，点击虚拟 NAT 的 DHCP 服务器，启用 SecureNAT</p><p><img src="https://i.loli.net/2018/09/17/5b9fbf1c907bf.png" alt=""></p><p>将端口改为 53，并点击为 OpenVPN Client 生成配置样本文件，将其保存到一个地方。</p><p><img src="https://i.loli.net/2018/09/17/5b9fbf956a7d5.png" alt=""></p><h4 id="配置-OpenVPN"><a href="#配置-OpenVPN" class="headerlink" title="配置 OpenVPN"></a>配置 OpenVPN</h4><p>到官网下载 OpenVPN，<a href="https://openvpn.net/index.php/open-source/downloads.html（需翻墙，跟" target="_blank" rel="noopener">https://openvpn.net/index.php/open-source/downloads.html（需翻墙，跟</a> VPN 有关的东西在国内墙得厉害），下载 windows 版并安装，然后打开，点击 Import file 将刚才的样本文件中的以 l3 结尾的文件导入到 OpenVPN 的配置目录中</p><p><img src="https://i.loli.net/2018/09/17/5b9fc2a1346f4.png" alt=""></p><p><img src="https://i.loli.net/2018/09/17/5b9fc2cd88e75.png" alt=""></p><p>导入完之后点击 connect</p><p><img src="https://i.loli.net/2018/09/17/5b9fc30bdf586.png" alt=""></p><p>将你刚才设置的虚拟 HUB 中的用户名和密码输入，勾选 Save password，如果出现这个提示，就表示设置成功了</p><p><img src="https://i.loli.net/2018/09/17/5b9fc3a8cce0b.png" alt=""></p><p>这时你可以注销认证，再试试连接，发现依然可以联网。</p><h3 id="三、实际使用"><a href="#三、实际使用" class="headerlink" title="三、实际使用"></a>三、实际使用</h3><p>阿里云学生服务器自带的带宽是 1M，网速很不理想，最快也就 150K/s 的速度，但是阿里云可以通过暂时提升带宽来提升网速，总的来说就是服务器的带宽决定了我们的网速，下面是 10M 的速度作为参考。。。</p><p><img src="https://i.loli.net/2018/09/17/5b9fc5f489c7c.png" alt=""></p><p>如果没有特殊的需求的话，看看普通网页的话 1M 的速度够了，主要是可以解决 12 点后完全没网的尴尬。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://www.bennythink.com/udp53.html" target="_blank" rel="noopener">UDP 53 免费上网、DNS 隧道经验谈 </a></li><li><a href="https://www.bennythink.com/softether-vpnserver.html" target="_blank" rel="noopener">SoftEther VPN Server 安装笔记 + 福利 </a></li><li><a href="https://blog.csdn.net/qq_39591494/article/details/78625394" target="_blank" rel="noopener">Centos7.4 使用 SoftEther 搭建 VPN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h3&gt;&lt;p&gt;阿里云的学生服务器买了有一段时间了，本来想拿来部署一个网站的，但是因为国内坑爹的备案制度，导致我又买了一个国外的服务器来部署（国外的学生服务器比国内便宜多了），所以目前阿里云这个服务器就空闲了下来，为了不浪费这个服务器资源，于是就去知乎找了一些有关于学生服务器的用处，就发现有人提了这个用处，而且我们学校 12 点断网后连手机信号也会断，只能通过这种方法来上网，顿时觉得我们学校太 tm 坑了，但这个方法并不适用于所有校园网认证，如需&lt;strong&gt;锐捷认证&lt;/strong&gt;的&lt;strong&gt;有线连接&lt;/strong&gt;，正巧我们学校的还有无线 web 认证，&lt;s&gt; 可能是学校自己弄的 &lt;/s&gt;，总之这个认证系统就很水，这个方法用了一段时间了并没有出任何问题，至于以后就不知道了，&lt;s&gt; 也许网管某天会发现 53 端口走了一堆 malformed packet 然后警告我一波。&lt;/s&gt;&lt;br&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://blog.henryxzx.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="校园网" scheme="http://blog.henryxzx.com/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91/"/>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/tags/Linux/"/>
    
      <category term="服务器" scheme="http://blog.henryxzx.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux教程</title>
    <link href="http://blog.henryxzx.com/2018/09/10/Linux%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.henryxzx.com/2018/09/10/Linux教程/</id>
    <published>2018-09-09T16:08:35.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-2-章-新手必须掌握的-Linux-命令"><a href="#第-2-章-新手必须掌握的-Linux-命令" class="headerlink" title="第 2 章 新手必须掌握的 Linux 命令"></a>第 2 章 新手必须掌握的 Linux 命令</h1><ul><li><code>man</code>命令中常用按键以及用途<a id="more"></a></li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrdrhrknyj20mj0ci400.jpg" alt=""></p><ul><li><code>man</code>命令帮助信息的结构以及意义</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrdsy4yb3j20mq0c4dh8.jpg" alt=""></p><p>举例：<code>man man</code></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrdvph3bzj20o20nu0uq.jpg" alt=""></p><h2 id="常用系统工作命令"><a href="#常用系统工作命令" class="headerlink" title="常用系统工作命令"></a>常用系统工作命令</h2><ul><li><p><code>echo</code> 输出字符串或变量的值。</p></li><li><p><code>date</code> 用于显示及设置系统的时间或日期。<code>date [选项] [+指定的格式]</code> 其中<code>+</code>可以格式化。</p></li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsre0ltqizj20mo08ewf1.jpg" alt=""></p><p>举例：<code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrecwwaxyj20j6015a9w.jpg" alt=""></p><ul><li><p><code>reboot</code> 重启系统</p></li><li><p><code>poweroff</code> 关闭系统</p></li><li><p><code>wget</code> 用于在终端中下载网络文件</p></li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsree9lc79j20mw08l752.jpg" alt=""></p><p>举例：<code>wget https://www.linuxprobe.com/docs/LinuxProbe.pdf</code></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsregm9q21j20o308fjrx.jpg" alt=""></p><ul><li><code>ps</code> 用于查看系统中的进程状态</li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsreqmcx37j20ml04z3z2.jpg" alt=""></p><p>在 Linux 系统中，有5中常见的进程状态，分别为运行，中断，不可中断，僵死与停止，其各自含义如下所示。</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrevq6zk8j20lc09g40j.jpg" alt=""></p><p>进程状态各列的含义：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrewtf2ekj20n00c0mz4.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Linux系统中的命令参数有长短格式之分，长格式和长格式之间不能合并，长格式和短格式之间也不能合并，但短格式和短格式之间是可以合并的，合并后仅保留一个-（减号）即可。另外ps命令可允许参数不加减号（-），因此可直接写成ps aux的样子。</span><br></pre></td></tr></table></figure><ul><li><code>top</code> 用于动态监视进程活动与系统负载等信息。</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrf5bzkzij20vv05774r.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrf5qr8zcj20n70ax42f.jpg" alt=""></p><ul><li><code>pidof</code> 用于查询某个指定服务进程的<code>PID</code>值。</li></ul><p>举例：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrf85l4x6j20iz016dfn.jpg" alt=""></p><ul><li><p><code>kill</code> 用于终止某个指定<code>PID</code>的服务进程。</p></li><li><p><code>killall</code> 用于终止某个指定名称的服务所对应的 <strong>全部</strong> 进程。</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrfc2sgcuj20mt06zmzj.jpg" alt=""></p><h2 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h2><ul><li><code>ifconfig</code> 用于获取网卡配置与网络状态等信息。</li></ul><p>主要用处：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用ifconfig命令来查看本机当前的网卡配置与网络状态等信息时，其实主要查看的就是网卡名称、inet参数后面的IP地址、ether参数后面的网卡物理地址（又称为MAC地址），以及RX、TX的接收数据包与发送数据包的个数及累计流量</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrfinisn8j20iv09z0tc.jpg" alt=""></p><ul><li><code>uname</code> 用于查看系统内核与系统版本等信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在使用uname命令时，一般会固定搭配上-a参数来完整地查看当前系统的内核名称、主机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息。</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrfl5wifrj20mp06a758.jpg" alt=""></p><ul><li><code>uptime</code> 用于查看系统的负载信息。</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrfmrouj5j20nt01ta9x.jpg" alt=""></p><p>跟<code>top</code>第一行应该是一样的。</p><ul><li><code>free</code> 用于显示当前系统中内存的使用量信息。</li></ul><p>举例：<code>free -h</code> <code>-h</code>人性化显示（GB，MB之类的）</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrfqfx2xdj20ml07w3z5.jpg" alt=""></p><ul><li><code>who</code> 用于查看当前登入主机的用户终端信息。</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrfsblu51j20nh061weu.jpg" alt=""></p><ul><li><code>last</code> 用于查看所有系统的登录记录。</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrfww3blsj20n9088abz.jpg" alt=""></p><ul><li><code>history</code> 用于显示历史执行过的命令。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行history命令能显示出当前用户在本地计算机中执行过的最近1000条命令记录。如果觉得1000不够用，还可以自定义/etc/profile文件中的HISTSIZE变量值。在使用history命令时，如果使用-c参数则会清空所有的命令历史记录。还可以使用“!编码数字”的方式来重复执行某一次的命令。</span><br></pre></td></tr></table></figure><ul><li><code>sosreport</code> 用于收集系统配置及架构信息并输出诊断文件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当Linux系统出现故障需要联系技术支持人员时，大多数时候都要先使用这个命令来简单收集系统的运行状态和服务配置信息，以便让技术支持人员能够远程解决一些小问题，亦或让他们能提前了解某些复杂问题。</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsrg11lcbhj20m409igmm.jpg" alt=""></p><h2 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h2><ul><li><p><code>pwd</code> 用于显示用户当前所处的工作目录。</p></li><li><p><code>cd</code> 用于切换工作路径。</p></li></ul><p><code>cd -</code> 返回上一次所处的目录。</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss8bbvulgj20ld045mxc.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用“cd ..”命令进入上级目录，以及使用“cd ~”命令切换到当前用户的家目录，亦或使用“cd ~username”切换到其他用户的家目录。</span><br></pre></td></tr></table></figure><ul><li><code>ls</code> 用于显示目录中的文件信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用ls命令的“-a”参数看到全部文件（包括隐藏文件），使用“-l”参数可以查看文件的属性、大小等详细信息。将这两个参数整合之后，再执行ls命令即可查看当前目录中的所有文件并输出这些文件的属性信息。</span><br><span class="line">如果想要查看目录属性信息，则需要额外添加一个-d参数。</span><br></pre></td></tr></table></figure><h2 id="文本文件编辑命令"><a href="#文本文件编辑命令" class="headerlink" title="文本文件编辑命令"></a>文本文件编辑命令</h2><ul><li><p>Linux “一切皆文件”</p></li><li><p><code>cat</code> 用于查看纯文本文件（内容较少的）。</p></li></ul><p><code>cat -n</code> 显示行号。</p><ul><li><code>more</code> 用于查看纯文本文件。</li></ul><p><code>空格或回车</code> 翻页。</p><ul><li><code>head</code> 用于查看纯文本文档的前 N 行。</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss8lkq1gdj20ox09l40b.jpg" alt=""></p><ul><li><code>tail</code> 用于查看纯文本文档的后 N 行或 <strong>持续刷新内容</strong>。</li></ul><p><code>持续刷新内容举例 tail -f test</code>:</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss8psx4maj20ck03f0sp.jpg" alt=""></p><ul><li><code>tr</code> 用于替换文本文件中的字符，<code>tr 「原始字符」 「目标字符」</code></li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss8tg697pj20p60bggms.jpg" alt=""></p><ul><li><code>wc</code> 用于统计指定文本的行数，字数，字节数。</li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss8ux1t2oj20j30410sv.jpg" alt=""></p><p><code>wc -l /var/log/messages</code></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss8vcvzuqj20ci01cmx0.jpg" alt=""></p><ul><li><code>stat</code> 用于查看文件的具体存储信息和时间等信息。</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss8yt45lgj20jb07pjss.jpg" alt=""></p><ul><li><code>cut</code> 用于按<code>列</code>提取文本字符。<code>-d</code>设置间隔符号，<code>-f</code>设置需要查看的列数，<code>-c</code>指定提取内容的字符串个数。</li></ul><p><code>head -10 /etc/shadow | cut -d: -f1</code></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss914jg97j20h70643yk.jpg" alt=""></p><p><code>head -10 /etc/passwd | cut -c2-4</code></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss94hobe8j20en05o748.jpg" alt=""></p><ul><li><code>diff</code> 用于比较多个文本文件的差异。</li></ul><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fss9h6n8quj20fc0k6wgd.jpg" alt=""></p><h2 id="文件目录管理命令"><a href="#文件目录管理命令" class="headerlink" title="文件目录管理命令"></a>文件目录管理命令</h2><ul><li><code>touch</code> 用于创建空白文件或设置文件的时间。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对touch命令来讲，有难度的操作主要是体现在设置文件内容的修改时间（mtime）、文件权限或属性的更改时间（ctime）与文件的读取时间（atime）</span><br></pre></td></tr></table></figure><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsscr44ridj20jg049aae.jpg" alt=""></p><p>举例：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssd1zhp41j20hd05s74p.jpg" alt=""></p><ul><li><p><code>mkdir</code> 用于创建空白的目录。</p></li><li><p><code>cp</code> 用于复制文件或目录。</p></li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssd3cvk3rj20kb090q55.jpg" alt=""></p><ul><li><p><code>mv</code> 用于剪切文件或将文件重命名。</p></li><li><p><code>rm</code> 用于删除文件或目录。</p></li><li><p><code>dd</code> 用于按照指定大小和个数的数据块来复制文件或转换文件。</p></li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssd8sakwvj20ki04rdg8.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux系统中有一个名为/dev/zero的设备文件，这个文件不会占用系统存储空间，但却可以提供无穷无尽的数据，因此可以使用它作为dd命令的输入文件，来生成一个指定大小的文件。</span><br></pre></td></tr></table></figure><p>例子：</p><p><code>dd if=/dev/zero of=hh count=2 bs=20M</code> 总文件大小”2*20M = 40M”</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssdd0i6lij20ho045dg3.jpg" alt=""></p><ul><li><code>file</code> 用于查看文件的类型。</li></ul><p>举例：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssdfyt6luj20gc02jq2z.jpg" alt=""></p><h2 id="打包压缩与搜索命令"><a href="#打包压缩与搜索命令" class="headerlink" title="打包压缩与搜索命令"></a>打包压缩与搜索命令</h2><ul><li><code>tar</code> 用于对文件进行打包压缩或解压。</li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssdhvipz3j20k108ydgv.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先，-c参数用于创建压缩文件，-x参数用于解压文件，因此这两个参数不能同时使用。其次，-z参数指定使用Gzip格式来压缩或解压文件，-j参数指定使用bzip2格式来压缩或解压文件。用户使用时则是根据文件的后缀来决定应使用何种格式参数进行解压。在执行某些压缩或解压操作时，可能需要花费数个小时，如果屏幕一直没有输出，您一方面不好判断打包的进度情况，另一方面也会怀疑电脑死机了，因此非常推荐使用-v参数向用户不断显示压缩或解压的过程。-C参数用于指定要解压到哪个指定的目录。</span><br><span class="line"></span><br><span class="line">！！！（重要）</span><br><span class="line">-f参数特别重要，它必须放到参数的最后一位，代表要压缩或解压的软件包名称。</span><br></pre></td></tr></table></figure><ul><li><code>grep</code> 用于在文本中执行关键词搜索，并显示匹配的结果。</li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssdmwsvbfj20j904gwev.jpg" alt=""></p><p>举例：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssdprmr4vj20nu0lo782.jpg" alt=""></p><ul><li><code>find</code> 用于按照指定条件来查找文件。</li></ul><p>参数列表：</p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fssds70s8mj20j00fin00.jpg" alt=""></p><p>例子：</p><p><code>find / -type f -name &quot;*.conf&quot; -exec stat -c &quot;%s %n&quot; {} \; | sort -nr | head -10</code></p><p><img src="https://ws1.sinaimg.cn/large/ecb0a9c3gy1fsseerskifj20ou0610tb.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">其中的&#123;&#125;表示搜索出的每一个文件。</span><br><span class="line">stat -c &quot;%s %n&quot; filename.</span><br></pre></td></tr></table></figure><h2 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用uptime命令查看系统负载时，对应的负载数值如果是0.91、0.56、0.32，那么最近15分钟内负载压力最大的是哪个时间段？</span><br><span class="line">答：通过负载数值可以看出，最近1分钟内的负载压力是最大的。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第-2-章-新手必须掌握的-Linux-命令&quot;&gt;&lt;a href=&quot;#第-2-章-新手必须掌握的-Linux-命令&quot; class=&quot;headerlink&quot; title=&quot;第 2 章 新手必须掌握的 Linux 命令&quot;&gt;&lt;/a&gt;第 2 章 新手必须掌握的 Linux 命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;man&lt;/code&gt;命令中常用按键以及用途
    
    </summary>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/categories/Linux/"/>
    
    
      <category term="Linux实验" scheme="http://blog.henryxzx.com/tags/Linux%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux makefile实验</title>
    <link href="http://blog.henryxzx.com/2018/04/25/Linux%20makefile%E5%AE%9E%E9%AA%8C/"/>
    <id>http://blog.henryxzx.com/2018/04/25/Linux makefile实验/</id>
    <published>2018-04-24T16:08:35.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<p>按照以下目录结构存放程序，然后制作makefile文件，把makefile文件内容填入表格中。</p><p>现有一个程序由5个文件组成:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./main.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mytool1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mytool2.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mytool1_print(<span class="string">"hello mytool1!\n"</span>);</span><br><span class="line">mytool2_print(<span class="string">"hello mytool2!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./functions/mytool1.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mytool1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool1_print</span><span class="params">(<span class="keyword">char</span> *print_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This is mytool1 print : %s "</span>,print_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./functions/mytool1.h */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYTOOL_1_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYTOOL_1_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool1_print</span><span class="params">(<span class="keyword">char</span> *print_str)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./functions/mytool2.c */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mytool2.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool2_print</span><span class="params">(<span class="keyword">char</span> *print_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This is mytool2 print : %s "</span>,print_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./functions/mytool2.h */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYTOOL_2_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYTOOL_2_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytool2_print</span><span class="params">(<span class="keyword">char</span> *print_str)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">./Makefile</span><br><span class="line">main:mytool1.o mytool2.o main.o</span><br><span class="line">gcc mytool1.o mytool2.o main.o -o main</span><br><span class="line">main.o:main.c ./<span class="built_in">functions</span>/mytool1.h ./<span class="built_in">functions</span>/mytool2.h</span><br><span class="line">gcc -c main.c -o main.o -I <span class="built_in">functions</span></span><br><span class="line">mytool1.o:./<span class="built_in">functions</span>/mytool1.c ./<span class="built_in">functions</span>/mytool1.h</span><br><span class="line">gcc -c ./<span class="built_in">functions</span>/mytool1.c -o mytool1.o</span><br><span class="line">mytool2.o:./<span class="built_in">functions</span>/mytool2.c ./<span class="built_in">functions</span>/mytool2.h</span><br><span class="line">gcc -c ./<span class="built_in">functions</span>/mytool2.c -o mytool2.o</span><br><span class="line">clean:</span><br><span class="line">rm -rf *.o main</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://i.loli.net/2018/09/12/5b99240c3c17d.jpg" alt="20180425214632493.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照以下目录结构存放程序，然后制作makefile文件，把makefile文件内容填入表格中。&lt;/p&gt;
&lt;p&gt;现有一个程序由5个文件组成:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* ./main.c */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;mytool1.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&quot;mytool2.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mytool1_print(&lt;span class=&quot;string&quot;&gt;&quot;hello mytool1!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mytool2_print(&lt;span class=&quot;string&quot;&gt;&quot;hello mytool2!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/categories/Linux/"/>
    
    
      <category term="Linux实验" scheme="http://blog.henryxzx.com/tags/Linux%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux shell程序设计实验2</title>
    <link href="http://blog.henryxzx.com/2018/04/22/Linux%20shell%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C2/"/>
    <id>http://blog.henryxzx.com/2018/04/22/Linux shell程序设计实验2/</id>
    <published>2018-04-21T16:08:35.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个shell过程完成如下功能（必须在脚本中使用函数）</p><a id="more"></a><p>1.程序接收3个参数:$1/$2和$3,合并两个文件$1/$2为$3,并显示，三个文件均为文本文件。<br>2.如果文件$3不存在，那么先报告缺少$3，然后将合并后的内容输出到mydoc.txt。如果有$3，就合并到$3。<br>3.如果文件$2或文件$3不存在，那么先报告缺少$2/$3，只显示$1的内容。</p><p>4.如果文件$1不存在，则提示缺少$1，要求重新运行程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"missing \$2 and \$3"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"output \$1:"</span></span><br><span class="line">    cat <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"missing \$3, output mydoc.txt:"</span></span><br><span class="line">    cat <span class="variable">$1</span> <span class="variable">$2</span> &gt;mydoc.txt</span><br><span class="line">    cat mydoc.txt</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">error</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"missing \$1 \$2 \$3, error!"</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    error</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$#</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    f1 <span class="variable">$1</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$#</span> -eq 2 ]; <span class="keyword">then</span></span><br><span class="line">    f2 <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$#</span> -eq 3 ]; <span class="keyword">then</span></span><br><span class="line">    cat <span class="variable">$1</span> <span class="variable">$2</span> &gt;<span class="variable">$3</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"output \$3:"</span>    </span><br><span class="line">    cat <span class="variable">$3</span>    </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写一个shell过程完成如下功能（必须在脚本中使用函数）&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/categories/Linux/"/>
    
    
      <category term="Linux实验" scheme="http://blog.henryxzx.com/tags/Linux%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux shell程序设计实验1</title>
    <link href="http://blog.henryxzx.com/2018/04/21/Linux%20shell%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C1/"/>
    <id>http://blog.henryxzx.com/2018/04/21/Linux shell程序设计实验1/</id>
    <published>2018-04-20T16:08:35.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<p>实验1-1</p><p>设计如下一个菜单驱动程序</p><p>Use one of the following options:<br>P:To display current directory<br>S:To display the name of running file<br>D:To display today’s date and present time (要求显示为：2017-04-26 05:45:12)<br>L:To see the list of files in your present working directory<br>W:To see who is logged in<br>Q:To quit this program<br>Enter your option and hit:<br>菜单程序将根据用户输入的选择项给出相应信息。要求对用户的输入忽略大小写，对于无效选项的输入给出相应提示。要求使用case语句实现以上功能，输入相应的字母后应该执行相应的命令完成每项功能，如输入P或p，就执行pwd命令。</p><a id="more"></a><p>实验1-2<br>编写一段bash shell程序，<br>根据键盘输入的学生成绩，显示相应的成绩登等级，<br>其中<br>60分以下为”Failed!”,<br>60～69分为”Passed!”,<br>70~79分为”Medium!”,<br>80~89分为”Good!”，<br>90～100为”Excellent!”。<br>如果输入超过100的分数，则显示错误分数提示。</p><p>如果输入负数，则退出程序，否则一直提示用户输入成绩</p><p>1-1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Use one of the following options:</span></span><br><span class="line"><span class="string">P:To display current directory</span></span><br><span class="line"><span class="string">S:To display the name of running file</span></span><br><span class="line"><span class="string">D:To display today's date and present time</span></span><br><span class="line"><span class="string">L:To see the list of files in your present working directory</span></span><br><span class="line"><span class="string">W:To see who is logged in</span></span><br><span class="line"><span class="string">Q:To quit this program</span></span><br><span class="line"><span class="string">Enter your option and hit:"</span></span><br><span class="line"><span class="built_in">read</span> ans</span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$ans</span>"</span> <span class="keyword">in</span></span><br><span class="line">P|p)</span><br><span class="line">    <span class="built_in">pwd</span></span><br><span class="line">    ;;</span><br><span class="line">S|s)</span><br><span class="line">    ls</span><br><span class="line">    ;;</span><br><span class="line">D|d)</span><br><span class="line">    date -d <span class="string">'2017-04-26 05:45:12'</span> <span class="string">'+%Y-%m-%d %H:%M:%S'</span> </span><br><span class="line">    ;;</span><br><span class="line">L|l)</span><br><span class="line">    ls -l</span><br><span class="line">    ;;</span><br><span class="line">W|w)</span><br><span class="line">    who</span><br><span class="line">    ;;</span><br><span class="line">Q|q)</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>1-2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please input your score: (0 - 100)"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> score</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$score</span> -lt 0 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -lt 60 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Failed!"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -lt 70 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Passed!"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -lt 80 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Medium!"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -lt 90 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Good!"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$score</span> -le 100 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Excellent!"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"the score must be smaller than 100"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验1-1&lt;/p&gt;
&lt;p&gt;设计如下一个菜单驱动程序&lt;/p&gt;
&lt;p&gt;Use one of the following options:&lt;br&gt;P:To display current directory&lt;br&gt;S:To display the name of running file&lt;br&gt;D:To display today’s date and present time (要求显示为：2017-04-26 05:45:12)&lt;br&gt;L:To see the list of files in your present working directory&lt;br&gt;W:To see who is logged in&lt;br&gt;Q:To quit this program&lt;br&gt;Enter your option and hit:&lt;br&gt;菜单程序将根据用户输入的选择项给出相应信息。要求对用户的输入忽略大小写，对于无效选项的输入给出相应提示。要求使用case语句实现以上功能，输入相应的字母后应该执行相应的命令完成每项功能，如输入P或p，就执行pwd命令。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/categories/Linux/"/>
    
    
      <category term="Linux实验" scheme="http://blog.henryxzx.com/tags/Linux%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux实验二</title>
    <link href="http://blog.henryxzx.com/2018/04/20/Linux%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
    <id>http://blog.henryxzx.com/2018/04/20/Linux实验二/</id>
    <published>2018-04-19T16:08:35.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux实验二"><a href="#Linux实验二" class="headerlink" title="Linux实验二"></a>Linux实验二</h4><a id="more"></a><h4 id="实验环境-win10-redhat5"><a href="#实验环境-win10-redhat5" class="headerlink" title="实验环境:win10 + redhat5"></a>实验环境:win10 + redhat5</h4><h4 id="1、创建组testgroup；"><a href="#1、创建组testgroup；" class="headerlink" title="1、创建组testgroup；"></a>1、创建组testgroup；</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd testgroup</span><br></pre></td></tr></table></figure><h4 id="2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。"><a href="#2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。" class="headerlink" title="2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。"></a>2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/groupd //在后面添加a2012</span><br></pre></td></tr></table></figure><h4 id="3、创建用户a2013，其用户主目录为-tmp-a2013，其主组为testgroup，附加组为users。"><a href="#3、创建用户a2013，其用户主目录为-tmp-a2013，其主组为testgroup，附加组为users。" class="headerlink" title="3、创建用户a2013，其用户主目录为/tmp/a2013，其主组为testgroup，附加组为users。"></a>3、创建用户a2013，其用户主目录为/tmp/a2013，其主组为testgroup，附加组为users。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /tmp/a2013 -g testgroup -G users a2013</span><br></pre></td></tr></table></figure><h4 id="4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件-tmp-test-log中。"><a href="#4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件-tmp-test-log中。" class="headerlink" title="4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件/tmp/test.log中。"></a>4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件/tmp/test.log中。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su a2012</span><br><span class="line">id</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su 2013</span><br><span class="line">id</span><br></pre></td></tr></table></figure><h4 id="5、参考书本98-99页crontab命令内容，使用root执行crontab-e，编写时程表，完成每隔5分钟把当前时间追加进-tmp-test-log中。"><a href="#5、参考书本98-99页crontab命令内容，使用root执行crontab-e，编写时程表，完成每隔5分钟把当前时间追加进-tmp-test-log中。" class="headerlink" title="5、参考书本98-99页crontab命令内容，使用root执行crontab -e，编写时程表，完成每隔5分钟把当前时间追加进/tmp/test.log中。"></a>5、参考书本98-99页crontab命令内容，使用root执行crontab -e，编写时程表，完成每隔5分钟把当前时间追加进/tmp/test.log中。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 * * * * data &gt;&gt; /tmp/test.log</span><br></pre></td></tr></table></figure><h4 id="6、执行crontab-l，把输出内容追加进-tmp-test-log。"><a href="#6、执行crontab-l，把输出内容追加进-tmp-test-log。" class="headerlink" title="6、执行crontab -l，把输出内容追加进/tmp/test.log。"></a>6、执行crontab -l，把输出内容追加进/tmp/test.log。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l &gt;&gt; /tmp/test.log</span><br></pre></td></tr></table></figure><h4 id="7、待完成2次时间记录追加后，执行crontab-r删除当前的时程表。"><a href="#7、待完成2次时间记录追加后，执行crontab-r删除当前的时程表。" class="headerlink" title="7、待完成2次时间记录追加后，执行crontab -r删除当前的时程表。"></a>7、待完成2次时间记录追加后，执行crontab -r删除当前的时程表。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure><h4 id="8、把-tmp-test-log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。"><a href="#8、把-tmp-test-log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。" class="headerlink" title="8、把/tmp/test.log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。"></a>8、把/tmp/test.log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Linux实验二&quot;&gt;&lt;a href=&quot;#Linux实验二&quot; class=&quot;headerlink&quot; title=&quot;Linux实验二&quot;&gt;&lt;/a&gt;Linux实验二&lt;/h4&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/categories/Linux/"/>
    
    
      <category term="Linux实验" scheme="http://blog.henryxzx.com/tags/Linux%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux课堂练习1</title>
    <link href="http://blog.henryxzx.com/2018/04/16/Linux%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A01/"/>
    <id>http://blog.henryxzx.com/2018/04/16/Linux课堂练习1/</id>
    <published>2018-04-15T16:08:35.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<p>环境：win10 + redhat 5</p><a id="more"></a><h5 id="1、创建组testgroup。"><a href="#1、创建组testgroup。" class="headerlink" title="1、创建组testgroup。"></a>1、创建组testgroup。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd testgroup</span><br></pre></td></tr></table></figure><h5 id="2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。"><a href="#2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。" class="headerlink" title="2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。"></a>2、创建用户a2012，先采用默认设置创建，然后使该用户加入testgroup组。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd a2012</span><br><span class="line">usermod -g testgroup</span><br></pre></td></tr></table></figure><h5 id="3、创建用户a2013，其用户主目录为-tmp-a2013，其主组为testgroup，附加组为users。"><a href="#3、创建用户a2013，其用户主目录为-tmp-a2013，其主组为testgroup，附加组为users。" class="headerlink" title="3、创建用户a2013，其用户主目录为/tmp/a2013，其主组为testgroup，附加组为users。"></a>3、创建用户a2013，其用户主目录为/tmp/a2013，其主组为testgroup，附加组为users。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd a2013</span><br><span class="line">usermod -g testgroup</span><br><span class="line">usermod -G users</span><br></pre></td></tr></table></figure><h5 id="4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件-tmp-test-log中。"><a href="#4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件-tmp-test-log中。" class="headerlink" title="4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件/tmp/test.log中。"></a>4、用id命令显示a2012和a2013用户信息，并且把这些信息记录到日志文件/tmp/test.log中。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id a2012 &gt; /tmp/test.log</span><br><span class="line">id a2013 &gt;&gt; /tmp/test.log</span><br></pre></td></tr></table></figure><h5 id="5、参考书本98-99页crontab命令内容，使用root执行crontab-e，编写时程表，完成每隔5分钟把当前时间追加进-tmp-test-log中。"><a href="#5、参考书本98-99页crontab命令内容，使用root执行crontab-e，编写时程表，完成每隔5分钟把当前时间追加进-tmp-test-log中。" class="headerlink" title="5、参考书本98-99页crontab命令内容，使用root执行crontab -e，编写时程表，完成每隔5分钟把当前时间追加进/tmp/test.log中。"></a>5、参考书本98-99页crontab命令内容，使用root执行crontab -e，编写时程表，完成每隔5分钟把当前时间追加进/tmp/test.log中。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">*/5 * * * * date &gt;&gt; /tmp/test.log</span><br></pre></td></tr></table></figure><h5 id="6、执行crontab-l，把输出内容追加进-tmp-test-log。"><a href="#6、执行crontab-l，把输出内容追加进-tmp-test-log。" class="headerlink" title="6、执行crontab -l，把输出内容追加进/tmp/test.log。"></a>6、执行crontab -l，把输出内容追加进/tmp/test.log。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l &gt;&gt; /tmp/test.log</span><br></pre></td></tr></table></figure><h5 id="7、待完成2次时间记录追加后，执行crontab-r删除当前的时程表。"><a href="#7、待完成2次时间记录追加后，执行crontab-r删除当前的时程表。" class="headerlink" title="7、待完成2次时间记录追加后，执行crontab -r删除当前的时程表。"></a>7、待完成2次时间记录追加后，执行crontab -r删除当前的时程表。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure><h5 id="8、把-tmp-test-log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。"><a href="#8、把-tmp-test-log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。" class="headerlink" title="8、把/tmp/test.log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。"></a>8、把/tmp/test.log拷贝到windows中（注意文本格式的转换），采用记事本打开，看是否看到完整内容。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix2dos test.log   <span class="comment">#将unix中的换行符转换为dos环境下能识别的类型</span></span><br></pre></td></tr></table></figure><p>最后将文件复制到win环境下得到test.log</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境：win10 + redhat 5&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/categories/Linux/"/>
    
    
      <category term="Linux实验" scheme="http://blog.henryxzx.com/tags/Linux%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux实验一</title>
    <link href="http://blog.henryxzx.com/2018/04/12/Linux%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <id>http://blog.henryxzx.com/2018/04/12/Linux实验一/</id>
    <published>2018-04-11T16:08:35.000Z</published>
    <updated>2018-10-22T04:01:14.670Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux实验一"><a href="#Linux实验一" class="headerlink" title="Linux实验一"></a>Linux实验一</h4><a id="more"></a><h4 id="环境：win10-redhat-5"><a href="#环境：win10-redhat-5" class="headerlink" title="环境：win10 + redhat 5"></a>环境：win10 + redhat 5</h4><h4 id="1、root帐号登录，查看-tmp目录，如果-tmp目录下没有子目录myshare，则建立该目录。"><a href="#1、root帐号登录，查看-tmp目录，如果-tmp目录下没有子目录myshare，则建立该目录。" class="headerlink" title="1、root帐号登录，查看/tmp目录，如果/tmp目录下没有子目录myshare，则建立该目录。"></a>1、root帐号登录，查看/tmp目录，如果/tmp目录下没有子目录myshare，则建立该目录。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /tmp | grep myshare</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /tmp/myshare</span><br></pre></td></tr></table></figure><h4 id="2、创建帐号testuser。"><a href="#2、创建帐号testuser。" class="headerlink" title="2、创建帐号testuser。"></a>2、创建帐号testuser。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd testuser</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd testuser</span><br></pre></td></tr></table></figure><h4 id="3、把myshare目录及其目录下的所有文件和子目录的拥有者该为testuser，工作组改为users。"><a href="#3、把myshare目录及其目录下的所有文件和子目录的拥有者该为testuser，工作组改为users。" class="headerlink" title="3、把myshare目录及其目录下的所有文件和子目录的拥有者该为testuser，工作组改为users。"></a>3、把myshare目录及其目录下的所有文件和子目录的拥有者该为testuser，工作组改为users。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R testuser:users /tmp/myshare</span><br></pre></td></tr></table></figure><h4 id="4、切换至testuser帐号。进入-tmp-myshare目录，采用vim编辑器编写以下程序-程序名称为hello-sh："><a href="#4、切换至testuser帐号。进入-tmp-myshare目录，采用vim编辑器编写以下程序-程序名称为hello-sh：" class="headerlink" title="4、切换至testuser帐号。进入/tmp/myshare目录，采用vim编辑器编写以下程序,程序名称为hello.sh："></a>4、切换至testuser帐号。进入/tmp/myshare目录，采用vim编辑器编写以下程序,程序名称为hello.sh：</h4><blockquote><p>#!/bin/bash<br>echo “app start”<br>echo -e<br>func (){<br>  echo “hello world!”<br>}<br>func<br>echo -e<br>echo “app end”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su testuser</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /tmp/myshare/hello.sh</span><br></pre></td></tr></table></figure><h4 id="5、保存hello-sh后，给予hello-sh拥有者可读、可写和可执行的权限，同组可读可执行，其他人可执行权限。"><a href="#5、保存hello-sh后，给予hello-sh拥有者可读、可写和可执行的权限，同组可读可执行，其他人可执行权限。" class="headerlink" title="5、保存hello.sh后，给予hello.sh拥有者可读、可写和可执行的权限，同组可读可执行，其他人可执行权限。"></a>5、保存hello.sh后，给予hello.sh拥有者可读、可写和可执行的权限，同组可读可执行，其他人可执行权限。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 751 hello.sh</span><br></pre></td></tr></table></figure><h4 id="6、输入-hello-sh，观察程序输出的效果。"><a href="#6、输入-hello-sh，观察程序输出的效果。" class="headerlink" title="6、输入./hello.sh，观察程序输出的效果。"></a>6、输入./hello.sh，观察程序输出的效果。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.sh</span><br></pre></td></tr></table></figure><h4 id="7、进入testuser的用户主目录，在这个目录下创建hello-sh的软链接，同时拷贝hello-sh到该目录下并改名为hello-sh-bak，要求copy时保留文件属性值。"><a href="#7、进入testuser的用户主目录，在这个目录下创建hello-sh的软链接，同时拷贝hello-sh到该目录下并改名为hello-sh-bak，要求copy时保留文件属性值。" class="headerlink" title="7、进入testuser的用户主目录，在这个目录下创建hello.sh的软链接，同时拷贝hello.sh到该目录下并改名为hello.sh.bak，要求copy时保留文件属性值。"></a>7、进入testuser的用户主目录，在这个目录下创建hello.sh的软链接，同时拷贝hello.sh到该目录下并改名为hello.sh.bak，要求copy时保留文件属性值。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /tmp/myshare/hello.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -p /tmp/myshare/hello.sh /home/testuser/hello.sh.bak</span><br></pre></td></tr></table></figure><h4 id="8、退出testuser帐号，回到root帐号，从-开始查找后缀名为-conf的所有文件，把输出结果重定向到testuser帐号的主目录下的output-txt文件。"><a href="#8、退出testuser帐号，回到root帐号，从-开始查找后缀名为-conf的所有文件，把输出结果重定向到testuser帐号的主目录下的output-txt文件。" class="headerlink" title="8、退出testuser帐号，回到root帐号，从/开始查找后缀名为.conf的所有文件，把输出结果重定向到testuser帐号的主目录下的output.txt文件。"></a>8、退出testuser帐号，回到root帐号，从/开始查找后缀名为.conf的所有文件，把输出结果重定向到testuser帐号的主目录下的output.txt文件。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">".conf"</span> &gt;&gt; /home/testuser/output.txt</span><br></pre></td></tr></table></figure><h4 id="9、在上一步操作的-conf文件中找出文件容量最大的和最小那个，并把这两个文件的容量大小输出到output-txt文件中。-gt-gt"><a href="#9、在上一步操作的-conf文件中找出文件容量最大的和最小那个，并把这两个文件的容量大小输出到output-txt文件中。-gt-gt" class="headerlink" title="9、在上一步操作的.conf文件中找出文件容量最大的和最小那个，并把这两个文件的容量大小输出到output.txt文件中。&gt;&gt;"></a>9、在上一步操作的.conf文件中找出文件容量最大的和最小那个，并把这两个文件的容量大小输出到output.txt文件中。&gt;&gt;</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">".conf"</span> -ls | awk <span class="string">'&#123;print $7&#125;'</span>|sort -n &gt; /home/testuser/tmp.out</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -1 /home/testuser/tmp.out &gt;&gt; /home/testuser/output.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -1 /home/testuser/tmp.out &gt;&gt; /home/testuser/output.txt</span><br></pre></td></tr></table></figure><h4 id="10、统计出系统中有多少个用户帐号，把数量输出到output-txt文件中。"><a href="#10、统计出系统中有多少个用户帐号，把数量输出到output-txt文件中。" class="headerlink" title="10、统计出系统中有多少个用户帐号，把数量输出到output.txt文件中。"></a>10、统计出系统中有多少个用户帐号，把数量输出到output.txt文件中。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | wc -l &gt;&gt; /home/testuser/output.txt</span><br></pre></td></tr></table></figure><h4 id="11、把output-txt文件转换为windows记事本可正规打开的格式。"><a href="#11、把output-txt文件转换为windows记事本可正规打开的格式。" class="headerlink" title="11、把output.txt文件转换为windows记事本可正规打开的格式。"></a>11、把output.txt文件转换为windows记事本可正规打开的格式。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix2doc output.txt</span><br></pre></td></tr></table></figure><h4 id="12、tar打包压缩testuser帐号主目录下的所有文件。"><a href="#12、tar打包压缩testuser帐号主目录下的所有文件。" class="headerlink" title="12、tar打包压缩testuser帐号主目录下的所有文件。"></a>12、tar打包压缩testuser帐号主目录下的所有文件。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zcvf testuser.tar.gz /home/testuser</span><br></pre></td></tr></table></figure><h4 id="13、把tar文件另存在window系统下。"><a href="#13、把tar文件另存在window系统下。" class="headerlink" title="13、把tar文件另存在window系统下。"></a>13、把tar文件另存在window系统下。</h4><p>U盘或者ftp</p><h4 id="14、执行userdel-r-testuser，执行rm-fr-myshare"><a href="#14、执行userdel-r-testuser，执行rm-fr-myshare" class="headerlink" title="14、执行userdel -r testuser，执行rm -fr myshare"></a>14、执行userdel -r testuser，执行rm -fr myshare</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Linux实验一&quot;&gt;&lt;a href=&quot;#Linux实验一&quot; class=&quot;headerlink&quot; title=&quot;Linux实验一&quot;&gt;&lt;/a&gt;Linux实验一&lt;/h4&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://blog.henryxzx.com/categories/Linux/"/>
    
    
      <category term="Linux实验" scheme="http://blog.henryxzx.com/tags/Linux%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
</feed>
